#! /usr/bin/env ruby
require 'yaml'

def system_log(str)
  puts str
  system(str)
end

album_path = File.expand_path(ARGV[0])
cms_path = ARGV[1]

args = %w{ album_path cms_path }.
  each_with_index.
  reduce({}) {|memo, (name, index)|
    memo[name.to_sym] = ARGV[index]
    memo
  }

args.map {|k,path|
  if !File.exists?(path || "")
    puts "USAGE: generate-live-album-info album-path www-richsoni-path"
    puts "bad path: '#{path}' for parameter '#{k}'"
    exit
  end
}

tracks = Dir.glob(args[:album_path]+"/*.flac").
  map {|file|
    parts=(file.split("/")[-1]).split(".")
    data = {
      :date => parts[0].gsub(/[^\d-]*/,''),
      :file => file,
      :location_slug => parts[1],
      :source => parts[2],
      :track => parts[3].gsub(/[^\d]*/,'').to_i,
      :track_slug => parts[4]
    }
    file_path = "#{cms_path}/content/songs/#{data[:track_slug]}.md"
    www_info = YAML.load(File.read(file_path))
    data.merge({
      :title => www_info["title"].gsub(/'/,"")
    })
  }.
  sort {|a, b| a[:track] <=> b[:track]}

puts "tagging flac files"

location_info = YAML.load(File.read("#{cms_path}/content/locations/#{tracks[0][:location_slug]}.yaml"))
date = tracks[0][:date]

tracks.each {|track|
  [
    ["ALBUM", "#{track[:date]}: Rich Soni Live at #{location_info["name"]}"],
    ["ARTIST", "Rich Soni"],
    ["TITLE", track[:title]],
    ["TRACKNUMBER", "%.2d" % (track[:track])],
    ["DATE", track[:date]]
  ].each {|cons|
    system_log("metaflac --remove-tag='#{cons[0]}' --set-tag='#{cons[0]}=#{cons[1]}' #{track[:file]}")
  }
}

output = [
"Rich Soni",
date,
location_info["name"],
"#{location_info["address"]["locality"]}, #{location_info["address"]["region"]}",
"",
"source: Soundboard",
"lineage: Yamaha MG10XU -> Tascam #{tracks[0][:source].upcase}",
"",
"tracks:",
tracks.map {|track|
  track_num = "%.2d" % (track[:track])
  "#{track_num}. #{track[:title]}"
},
].flatten
output.each {|o| puts o}

file_path = "#{album_path}/#{File.basename(album_path)}.txt"
puts ""
puts ""
puts "Write the above content to '#{file_path}'? [Y/n]"
response = (STDIN.gets).chomp
if response == "Y"
  file = File.open(file_path, "w")
  output.each {|o| file.puts o}
  file.close
  puts "wrote #{file_path}"
end
